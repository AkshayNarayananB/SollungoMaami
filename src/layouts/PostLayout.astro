---
import Main from "../layouts/MainLayout.astro";
import Markdown from "../components/Markdown.astro";
import CopyRight from "../components/misc/CopyRight.astro";

interface Props {
  title?: string;
  subTitle?: string;
  bannerImage?: string;
  published?: Date;
  license?: { name: string; url?: string };
  image?: string;
  author?: string;
  sourceLink?: string;
}

const {
  title,
  subTitle,
  bannerImage,
  published,
  license,
  author,
  sourceLink,
  image,
} = Astro.props;

// Use URL path as blogId (slug)
const blogId = Astro.url.pathname.replace(/^\/|\/$/g, "");
---

<Main title={title} subTitle={subTitle}>
  <div class="article-wrapper">
    <div class="article">
      <Markdown>
        <slot />
      </Markdown>

      {published && title && (
        <CopyRight
          title={title}
          published={published}
          license={license}
          author={author}
          sourceLink={sourceLink}
        />
      )}

      <!-- Comments Section -->
      <section id="comments-section" class="mt-8">
        <h2 class="text-xl font-bold mb-4">Comments</h2>
        <div id="comments-list" class="space-y-4"></div>

        <h3 class="text-lg font-semibold mt-6">Leave a Comment</h3>
        <form id="comment-form" class="space-y-2">
          <textarea
            name="comment"
            placeholder="Write your comment..."
            required
            class="w-full p-2 rounded border"
          ></textarea>
          <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded">
            Submit
          </button>
        </form>
      </section>
    </div>
  </div>
</Main>

<script is:client>
import { createClient } from "@supabase/supabase-js";

// ‚úÖ Initialize Supabase client
const supabase = createClient(
  import.meta.env.PUBLIC_SUPABASE_URL,
  import.meta.env.PUBLIC_SUPABASE_ANON_KEY
);

const form = document.getElementById("comment-form");
const commentsList = document.getElementById("comments-list");

// ‚úÖ Get blogId from path
const blogId = window.location.pathname.replace(/^\/|\/$/g, "");

// Load existing comments
async function loadComments() {
  try {
    const { data, error } = await supabase
      .from("comments")
      .select("*")
      .eq("slug", blogId)
      .eq("approved", true)
      .order("created_at", { ascending: true });

    if (error) throw error;

    commentsList.innerHTML = "";
    data.forEach((row) => {
      const commentEl = document.createElement("div");
      commentEl.classList.add("p-3", "bg-gray-100", "rounded");
      commentEl.innerHTML = `
        <p>${row.comment}</p>
        ${
          row.reply
            ? `<div class="ml-4 mt-2 p-2 bg-gray-200 rounded text-sm text-gray-700">Reply: ${row.reply}</div>`
            : ""
        }
      `;
      commentsList.appendChild(commentEl);
    });
  } catch (err) {
    console.error("Error loading comments:", err);
  }
}

// Handle form submission
form.addEventListener("submit", async (e) => {
  e.preventDefault(); // üö® Stop page reload & ?comment=... in URL

  const textarea = form.querySelector('textarea[name="comment"]');
  const comment = textarea.value.trim();
  if (!comment) return; // avoid empty submissions

  try {
    const { data, error } = await supabase
      .from("comments")
      .insert([{ slug: blogId, comment, approved: false }]); // needs moderation

    if (error) throw error;

    alert("‚úÖ Your comment has been submitted for approval.");
    textarea.value = "";

    // Optionally refresh visible comments (but only approved ones show)
    loadComments();
  } catch (err) {
    console.error("Error submitting comment:", err);
    alert("‚ùå Failed to submit comment. Check console for details.");
  }
});

// Initial load
loadComments();
</script>

<style>
.article-wrapper {
  @apply mx-3 rounded-2xl bg-[var(--card-color)] px-5 py-6 lg:mx-0 lg:px-10 lg:py-9;
}
.article {
  @apply flex flex-col;
  font-size: var(--primary-font);
}
</style>
