---
// src/components/Comments.astro
const { slug } = Astro.props;
---
<section class="comments-section" data-slug={slug}>
  <h2 class="text-xl font-bold mb-4">Comments</h2>
  <div class="comments-list space-y-4"></div>

  <h3 class="text-lg font-semibold mt-6">Leave a Comment</h3>
  <form class="comment-form space-y-2">
    <textarea
      name="comment"
      placeholder="Write your comment..."
      required
      class="w-full p-2 rounded border"
    ></textarea>
    <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded">
      Submit
    </button>
  </form>
</section>

<script is:client>
import { db } from '../db/firebase';
import { collection, addDoc, query, orderBy, onSnapshot } from 'firebase/firestore';

// Slug passed from Astro
const slug = Astro.props.slug;

document.addEventListener("DOMContentLoaded", () => {
  const form = document.querySelector("#comment-form");
  const commentsList = document.querySelector("#comments-list");

  // Use a unique collection per post
  const commentsRef = collection(db, `comments_${slug}`);

  // Real-time listener: load existing + future comments
  const q = query(commentsRef, orderBy("timestamp", "asc"));
  onSnapshot(q, (snapshot) => {
    commentsList.innerHTML = ""; // clear before re-render
    snapshot.forEach(doc => {
      const data = doc.data();
      const div = document.createElement("div");
      div.className = "p-3 bg-gray-100 rounded";
      div.textContent = data.comment;
      commentsList.appendChild(div);
    });
  });

  // Handle form submission
  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    const val = form.comment.value.trim();
    if (!val) return;

    try {
      await addDoc(commentsRef, {
        comment: val,
        timestamp: new Date()
      });
      console.log("âœ… Saved to Firestore");
      form.reset();
    } catch (err) {
      console.error("ðŸ”¥ Firestore error:", err);
    }
  });
});
</script>

