---
interface Props {
  slug: string;
}

const { slug } = Astro.props;
import { supabase } from '../db/supabase';

// Fetch comments for this post
const { data: comments, error } = await supabase
  .from('Comments')        // Match your table name exactly
  .select('*')
  .eq('slug', slug)
  .eq('approved', true)
  .order('timestamp', { ascending: true });
---

<div class="comments-section">
  {error && <p>Error loading comments: {error.message}</p>}
  
  {comments?.map(comment => (
    <div class="comment p-3 bg-gray-100 rounded">
      <p>{comment.comment}</p>
      {comment.reply && (
        <div class="ml-4 mt-2 p-2 bg-gray-200 rounded text-sm text-gray-700">
          Reply: {comment.reply}
        </div>
      )}
      <small class="text-gray-500 text-xs">{new Date(comment.timestamp).toLocaleString()}</small>
    </div>
  ))}

  <form id="comment-form" class="space-y-2 mt-4">
    <textarea
      name="comment"
      placeholder="Write a comment..."
      required
      class="w-full p-2 rounded border"
    ></textarea>
    <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded">Submit</button>
  </form>
</div>

<script is:client define:vars={{ slug }}>
const form = document.getElementById('comment-form');

form.addEventListener('submit', async (e) => {
  e.preventDefault();
  const comment = form.comment.value.trim();
  if (!comment) return;

  try {
    const { data, error } = await supabase
      .from('Comments')
      .insert([{ slug, comment, approved: false }]); // Needs moderation
    if (error) throw error;

    form.reset();
    location.reload(); // Simple way to refresh comments
  } catch (err) {
    console.error('Error posting comment:', err);
    alert('Failed to post comment. Check console.');
  }
});
</script>
